赛题与数据

文件名称 (报名后可下载)

文件格式

    初赛数据及操作规范约定(提取码：S9ynoX)

    download

比赛环境

开发语言java，依赖管理Maven,JDK7

比赛帮助文档：
1、重要学习资料及热门问题：
https://bbs.aliyun.com/read/277544.html
2、Jstorm开发帮助文档：
https://github.com/alibaba/jstorm/wiki/JStorm-Chinese-Documentation
3、Tair开发帮助文档：
http://code.taobao.org/p/tair/wiki/index/
4、RocketMQ 开发帮助文档：
https://github.com/alibaba/RocketMQ
5、大赛背后技术揭秘
https://yq.aliyun.com/topic/35



第一赛季赛题

题目：模拟实时统计阿里双十一交易数据

赛题描述：我们将脱敏后的双11交易数据存储在RocketMQ中，选手利用JStorm从RocketMQ拉取数据，按照要求实时计算出结果，并将结果写入Tair。我们约定用整分时刻对应的时间戳来标识这一分钟，比如2015/11/11 08:11:00分钟对应的整分时间戳为1447200660，那么我们就用这个时间戳来表示这一分钟，即2015/11/11 08:11:00~2015/11/11 08:12::00(不包含这一时刻)。
选手需要计算的统计值如下：
1、分平台（淘宝、天猫）每分钟的交易金额，即计算每一分钟内的交易值。比如计算2015/11/11 11:11:00这一分钟的淘宝交易金额，就是统计从11:11:00分开始到11:12:00（不包含该时刻）这一分钟内的淘宝的交易总金额；
2、每整分时刻无线和PC端总交易金额比值；注意这里统计的是整分时刻对应的总交易比值，要将过去发生的所有交易都计算进去。比如计算2015/11/11 11:11:00整分时刻的交易比值，那么需要统计从交易开始时间到2015/11/11 11:12:00（不包含该时刻）这一区间内所有的交易值，来计算无线和PC端的比值；

    最终存储到Tair 中的数据是key-value 的结构，key字符串格式, value是number类型。 key 统一以“固定前缀_teamcode_整分时间戳”方式命名的字符串，整分时间戳就是整分时刻对应的时间戳，例如2015/11/11 08:11:00分钟对应的时间戳为1447200660(注意是10位数)，即该时刻的整分时间戳。其中teamcode是每支队伍唯一的标识。

(1)淘宝每分钟的交易金额的key是“platformTaobao_teamcode_整分时间戳”，值都是number类型；例如存入Tair的分平台淘宝实时交易金额格式如下：{"platformTaobao_1234auu_1447200660": 100}

(2)天猫每分钟的交易金额的key是“platformTmall_ teamcode _整分时间戳”，值都是number类型；例如存入Tair的分平台天猫实时交易金额格式如下：{"platformTmall_1234auu_1447200660": 200}

(3) 每整分时刻无线和PC端总交易金额比值的key为“ratio_ teamcode_整分时间戳”, 值是一个保留两位小数的number类型。例如存入Tair的无线和PC端实时交易金额比值格式如下：{"ratio_1234auu_1447200660": 2.12}

最终选手提交的代码，会跑在我们后台部署的集群上，我们后台部署的产品版本是：JStorm-2.1.1，RocketMQ-3.2.6，Tair-2.3.5。
 

评分标准：
该赛题评判标准依据计平均准确度和平均耗时。
(1) 平均准确度：对每个整分时刻的统计值进行验证，计算每一个统计值的准确度，然后求平均值，得到的就是平均准确度。
(2) 平均耗时：每个统计值的耗时是指从拓扑开始提交，到把这一统计值写入Tair这一时段的时长。我们会计算出每个统计值的耗时，求平均值，得到的就是平均耗时。
优先根据平均准确度对各支队伍进行排名，准确度越高的，排名靠前；准确度一样的再根据平均耗时排名，耗时越短的队伍排名靠前。比赛周期每天给出的排名都是根据每只队列历史最优的成绩进行排名的。最终会筛选出Top100的队伍参加复赛。
 

考察点：
（1） 只要满足功能要求即可，让选手自己学会如何使用RocketMQ／JStorm／Tair， 并学会如何搭建这3套系统，如何使用这3件产品；
（2） 可以让选手前期进行自我学习，我们提供模拟交易的数据， 让用户自行下载，自行搭建测试环境。
 

第二赛季赛题

题目：交易记录查询

赛题描述：天猫与淘宝上每天产生了大量的交易，每一笔交易会生成一条交易记录。现在有许多交易记录文件，文件中每一行视作一条交易记录，每条记录中可能包含若干Key-Value对，这样的key-value对称为属性。文件内的交易记录之间是无序的。你的任务是将这些小文件组织成有序的形式并提供查询接口，供业务方查询。
更多赛题的详细信息请参见： https://code.aliyun.com/MiddlewareRace/order-system。

交易信息：
交易ID 	商品ID 	买家ID 	交易时间 	红包金额 	交易金额
10000 	1001 	101 	1460552595 	0.2 	188
10001 	1001 	102 	1460532598 	0.5 	188
10002 	1001 	101 	1460532500 	0.6 	138
10003 	1002 	102 	1460532607 	
	300
10004 	1003 	103 	1460532608 	
	288
10005 	1001 	104 	1460520604 	0.7 	20


买家信息：
买家ID 	姓名 	收货地址 	联系电话
101 	张三 	杭州市 	888886
102 	李四 	北京市 	888887
103 	王五 	上海市 	233-12345
104 	孙六 	广州市 	88888
105 	杨七 	香港 	45678


商品信息：
商品ID 	名称 	卖家ID 	标价 	打折价格
1001 	洗发水 	301 	188 	138
1002 	沐浴露 	301 	300 	
1003 	牙膏 	302 	20 	


业务方需要选手支持下面几种查询方法：
1、提供交易ID，查询某次交易的某些属性，比如查询某次交易的收货地址以及电话。查询的字段可能不在交易记录中，需要到商品信息或者买家信息中查询。
2、查询某位买家某个时间范围内的所有交易信息，比如查询买家在2016.4.14~2016.4.15之间所有交易的交易ID与交易金额。输出结果按交易时间从大到小排列
3、查询某位卖家的某个商品的全部交易订单，输出结果按交易订单从小到大排序
4、对某个商品的所有交易信息进行求和，比如查询某个卖家商品的折扣券金额总和
 

评分标准：
选手程序的运行分为两个阶段，准备阶段与查询阶段。
1、在准备阶段，选手的程序有至多一小时的时间进行数据排序和整理成选手认为最佳的形式，以满足查询的需要。如果超时，则认为程序失败，不计算分数。
2、在查询阶段，测试程序会按照一定的查询操作序列调用程序的查询接口。程序输出结果并比对标准结果，如果结果错误，则认为程序失败，不计算分数。如果一小时内未完成所有查询，那么查询成功的次数会被记录为选手的分数。
如果两阶段均在一小时内完成，那么两阶段的总耗时将会被记录为总分从少到多排名。如果第二阶段未在一小时内完成所有查询，那么完成查询的次数会被记录为分数从高到低并排名，但排名会低于完成第二阶段所有查询的选手。
